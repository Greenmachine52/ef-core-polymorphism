// <auto-generated />
using System;
using GenericDataPointHandlingDemo.Migrations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GenericDataPointHandlingDemo.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.9");

            modelBuilder.Entity("GenericDataPointHandlingDemo.Models.DataPoints.BaseDataPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DataPointType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SensorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SensorId");

                    b.ToTable("DataPoints");

                    b.HasDiscriminator<int>("DataPointType");
                });

            modelBuilder.Entity("GenericDataPointHandlingDemo.Models.Sensors.BaseSensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SensorType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Sensors");

                    b.HasDiscriminator<int>("SensorType");
                });

            modelBuilder.Entity("GenericDataPointHandlingDemo.Models.Thresholds.BaseThreshold", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("HighThresholdValue")
                        .HasColumnType("REAL");

                    b.Property<double?>("LowThresholdValue")
                        .HasColumnType("REAL");

                    b.Property<int>("SensorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ThresholdType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SensorId");

                    b.ToTable("Thresholds");

                    b.HasDiscriminator<int>("ThresholdType");
                });

            modelBuilder.Entity("GenericDataPointHandlingDemo.Models.Thresholds.TriggeredThreshold", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("ThresholdId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TriggeringValue")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ThresholdId");

                    b.ToTable("TriggeredThresholds");
                });

            modelBuilder.Entity("GenericDataPointHandlingDemo.Models.DataPoints.ConcreteSensorTypeOneDataPoint", b =>
                {
                    b.HasBaseType("GenericDataPointHandlingDemo.Models.DataPoints.BaseDataPoint");

                    b.Property<int>("ParameterOne")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("GenericDataPointHandlingDemo.Models.DataPoints.ConcreteSensorTypeTwoDataPoint", b =>
                {
                    b.HasBaseType("GenericDataPointHandlingDemo.Models.DataPoints.BaseDataPoint");

                    b.Property<int>("ParameterOne")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ConcreteSensorTypeTwoDataPoint_ParameterOne");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("GenericDataPointHandlingDemo.Models.Sensors.ConcreteSensorTypeOne", b =>
                {
                    b.HasBaseType("GenericDataPointHandlingDemo.Models.Sensors.BaseSensor");

                    b.HasDiscriminator().HasValue(0);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "First Sensor",
                            SensorType = 0
                        });
                });

            modelBuilder.Entity("GenericDataPointHandlingDemo.Models.Sensors.ConcreteSensorTypeTwo", b =>
                {
                    b.HasBaseType("GenericDataPointHandlingDemo.Models.Sensors.BaseSensor");

                    b.HasDiscriminator().HasValue(1);

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Name = "Second Sensor",
                            SensorType = 0
                        });
                });

            modelBuilder.Entity("GenericDataPointHandlingDemo.Models.Thresholds.ConcreteSensorOneThresholds.ConcreteSensorOneThreshold", b =>
                {
                    b.HasBaseType("GenericDataPointHandlingDemo.Models.Thresholds.BaseThreshold");

                    b.HasDiscriminator().HasValue(200);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HighThresholdValue = 90.0,
                            LowThresholdValue = 50.0,
                            SensorId = 1,
                            ThresholdType = 100
                        },
                        new
                        {
                            Id = 2,
                            HighThresholdValue = 90.0,
                            LowThresholdValue = 50.0,
                            SensorId = 2,
                            ThresholdType = 200
                        });
                });

            modelBuilder.Entity("GenericDataPointHandlingDemo.Models.DataPoints.BaseDataPoint", b =>
                {
                    b.HasOne("GenericDataPointHandlingDemo.Models.Sensors.BaseSensor", "Sensor")
                        .WithMany("DataPoints")
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("GenericDataPointHandlingDemo.Models.Thresholds.BaseThreshold", b =>
                {
                    b.HasOne("GenericDataPointHandlingDemo.Models.Sensors.BaseSensor", "Sensor")
                        .WithMany("Thresholds")
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("GenericDataPointHandlingDemo.Models.Thresholds.TriggeredThreshold", b =>
                {
                    b.HasOne("GenericDataPointHandlingDemo.Models.Thresholds.BaseThreshold", "Threshold")
                        .WithMany("TriggeredThresholds")
                        .HasForeignKey("ThresholdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Threshold");
                });

            modelBuilder.Entity("GenericDataPointHandlingDemo.Models.Sensors.BaseSensor", b =>
                {
                    b.Navigation("DataPoints");

                    b.Navigation("Thresholds");
                });

            modelBuilder.Entity("GenericDataPointHandlingDemo.Models.Thresholds.BaseThreshold", b =>
                {
                    b.Navigation("TriggeredThresholds");
                });
#pragma warning restore 612, 618
        }
    }
}
